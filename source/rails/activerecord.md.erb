---
title: ActiveRecord
---

# <%= current_page.data.title %>

## ドキュメント

[Active Record Basics](http://guides.rubyonrails.org/active_record_basics.html)

## Model の役目

- DBからデータを取ってくる。
- データを加工する
- データを保存したり削除したりする

x ActiveRecord is a model.

o ActiveRecord as a model.

## 規約

- テーブル名は複数形
- 対応するモデルは単数形
- テーブルに対する操作はクラスメソッド
- レコードに対する操作はインスタンスメソッド
- 外部キーは 相手のテーブル名 + '_id'

## Modelを作る

![リレーション](/images/Database.png)

Product(商品), OrderItem(注文明細), Order(注文) のModelをそれぞれgenerateする

```sh
$ rails generate model Product name:string price:integer
$ rails generate model OrderItem product:references quantity:integer order:references
$ rails generate model Order user:references summary:integer
$ rake db:migrate
```

### テーブル定義の変更

User(ユーザー)の定義を変更する

```sh
$ rails generate migration users_add_sex
```

```ruby
// 20140209081757_users_add_sex.rb ファイル名のタイムスタンプは変わります
class UsersAddSex < ActiveRecord::Migration
  def change
    change_table(:users) do |t|
      t.string :sex, limit: 8
    end
  end
end
```

```ruby
$ rake db:migrate
```

DB の確認

```sh
$ rails c
Loading development environment (Rails 4.0.2)
irb(main):001 > 
```

ここで User (頭文字大文字) を入力

```sh
irb(main):002 > User
 => User(no database connection) 
```

DB にまだコネクションがないとき。

```sh
irb(main):003 > User.all
  User Load (8.0ms)  SELECT "users".* FROM "users"
 => []
irb(main):004 > User
=> User(id: integer, name: string, age: integer, created_at: datetime, updated_at: datetime, sex: string)
```

## リレーションの設定

app/models 以下のファイルを編集

例）User `1` : `多` Order  `1` : `多` OrderItems

user.rb

```ruby
class User < ActiveRecord::Base
  has_many :orders
  has_many :order_items, through: :orders
end
```

order.rb

```ruby
class Order < ActiveRecord::Base
  belongs_to :user
  has_many :order_items
end
```

英語のように読めばわかりやすい

* class User は、characters`(複数形)` をたくさんもっている。
* class Order は、user`(単数形)` に属している。

DB にデータを create して確認

```sh
$ rails c
Loading development environment (Rails 4.0.2)
irb(main):001 > User.create(name: "YOSHIDA")
   (0.1ms)  BEGIN
  SQL (0.2ms)  INSERT INTO `users` (`created_at`, `name`, `updated_at`) VALUES ('2014-02-09 08:28:45', 'YOSHIDA', '2014-02-09 08:28:45')
   (0.3ms)  COMMIT
=> #<User id: 1, name: "YOSHIDA", age: nil, created_at: "2014-02-09 08:28:45", updated_at: "2014-02-09 08:28:45", sex: nil>
```

データの確認

```sh
irb(main):003 > User.all
  User Load (0.2ms)  SELECT `users`.* FROM `users`
=> #<ActiveRecord::Relation [#<User id: 1, name: "YOSHIDA", age: nil, created_at: "2014-02-09 08:28:45", updated_at: "2014-02-09 08:28:45", sex: nil>]>
```

同様に Order, OrderItem を create

```sh
irb(main):008 > Order.create(user_id: 1, summary: 0)
   (0.1ms)  begin transaction
  SQL (0.5ms)  INSERT INTO "orders" ("created_at", "summary", "updated_at", "user_id") VALUES (?, ?, ?, ?)  [["created_at", Sun, 09 Feb 2014 02:05:11 UTC +00:00], ["summary", 0], ["updated_at", Sun, 09 Feb 2014 02:05:11 UTC +00:00], ["user_id", 1]]
   (3.4ms)  commit transaction
 => #<Order id: 1, user_id: 1, summary: 0, created_at: "2014-02-09 02:05:11", updated_at: "2014-02-09 02:05:11">
irb(main):009 > OrderItem.create(order_id: 1)
   (0.2ms)  BEGIN
  SQL (0.2ms)  INSERT INTO `order_items` (`created_at`, `order_id`, `updated_at`) VALUES ('2014-02-09 23:22:17', 1, '2014-02-09 23:22:17')
   (0.4ms)  COMMIT
=> #<OrderItem id: 2, product_id: nil, quantity: nil, order_id: 1, created_at: "2014-02-09 23:22:17", updated_at: "2014-02-09 23:22:17">
```

リレーションの確認

```
irb(main):001 > User.first.orders
  User Load (0.2ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT 1
  Order Load (3.1ms)  SELECT "orders".* FROM "orders" WHERE "orders"."user_id" = ?  [["user_id", 1]]
 => #<ActiveRecord::Associations::CollectionProxy [#<Order id: 1, user_id: 1, summary: 0, created_at: "2014-02-09 02:05:11", updated_at: "2014-02-09 02:05:11">]>
irb(main):002 > 
 User.first.order_items
  User Load (0.2ms)  SELECT `users`.* FROM `users` ORDER BY `users`.`id` ASC LIMIT 1
  OrderItem Load (0.4ms)  SELECT `order_items`.* FROM `order_items` INNER JOIN `orders` ON `order_items`.`order_id` = `orders`.`id` WHERE `orders`.`user_id` = 1
=> #<ActiveRecord::Associations::CollectionProxy [#<OrderItem id: 2, product_id: nil, quantity: nil, order_id: 1, created_at: "2014-02-09 23:22:17", updated_at: "2014-02-09 23:22:17">]>

```

## バリデーション

例）ユーザーの name を必須にする

user.rb
```ruby
class User < ActiveRecord::Base
  has_many :orders

  validates :name, presence: true
end
```

バリデーションの確認

```sh
irb(main):002 > User.create(name: "")
   (0.2ms)  begin transaction
   (0.1ms)  rollback transaction
 => #<User id: nil, name: "", sex: nil, created_at: nil, updated_at: nil> 
```

RailsGuide -> [Active Record Validations](http://edgeguides.rubyonrails.org/active_record_validations.html)

## SQL

ActiveRecord は SQL の組み立てに使えます。

```
irb(main):001:0> User.where(name: "YOSHIDA").to_sql
=> "SELECT `users`.* FROM `users`  WHERE `users`.`name` = 'YOSHIDA'"
irb(main):002:0> User.where("name LIKE ?", 'Y%').to_sql
=> "SELECT `users`.* FROM `users`  WHERE (name LIKE 'Y%')"
irb(main):003:0> User.group(:age).count(:id)
   (0.4ms)  SELECT COUNT(`users`.`id`) AS count_id, age AS age FROM `users` GROUP BY age
=> {nil=>1}
```

- from
- where
- order
- limit
- having
- distinct

RailsGuilde -> [Active Record Query Interface](http://guides.rubyonrails.org/active_record_querying.html)

## SQLインジェクション対策

1. Hash で渡す

```ruby
User.where(name: "YOSHIDA", created_at: (2.days.ago..Time.now))
```

2. Place Holder を使う

```ruby
User.where("name = ? AND created_at BETWEEN ? AND ?", "YOSHIDAF, 2.days.ago, Time.now")
```

`order や limit に対しては Place Holder が使えないので注意`

order も Hash で渡せます

```ruby
User.order(id: :desc)
```

## scope

scope とは特定の条件に対して名前をつけておき、メソッドチェインで AND にできる ActiveRecord の便利機能です

例）ユーザーの性別検索（引数なし）

user.rb

```ruby
class User < ActiveRecord::Base
  has_many :orders

  validates :name, presence: true

  scope :is_male, -> { where(sex: "male") }
end
```

scopeの確認の前に、データのアップデート

```sh
irb(main):006 > User.find(1).update(sex: "male")
  User Load (0.4ms)  SELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT 1  [["id", 1]]
   (0.3ms)  begin transaction
  SQL (3.8ms)  UPDATE "users" SET "sex" = ?, "updated_at" = ? WHERE "users"."id" = 1  [["sex", "male"], ["updated_at", Sun, 09 Feb 2014 02:34:14 UTC +00:00]]
   (0.9ms)  commit transaction
 => true 
irb(main):007 > User.find(1)
  User Load (0.3ms)  SELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT 1  [["id", 1]]
 => #<User id: 1, name: "吉田", sex: "male", created_at: "2014-02-09 02:00:28", updated_at: "2014-02-09 02:34:14"> 
```

scopeの確認

```sh
irb(main):001 > User.is_male
  User Load (0.1ms)  SELECT "users".* FROM "users" WHERE "users"."sex" = 'male'
 => #<ActiveRecord::Relation [#<User id: 1, name: "吉田", created_at: "2014-02-09 02:00:28", updated_at: "2014-02-09 02:34:14", sex: "male">]> 
```

例）ユーザーの性別検索（引数あり）

user.rb

```ruby
class User < ActiveRecord::Base
  has_many :orders

  validates :name, presence: true

  scope :is_male, -> { where(sex: "male") }
  scope :by_sex,  ->(sex) { where(sex: sex) }
end
```

scopeの確認

```sh
irb(main):001 > User.by_sex("male")
  User Load (0.1ms)  SELECT "users".* FROM "users" WHERE "users"."sex" = 'male'
 => #<ActiveRecord::Relation [#<User id: 1, name: "吉田", created_at: "2014-02-09 02:00:28", updated_at: "2014-02-09 02:34:14", sex: "male">]> 
irb(main):002 > User.by_sex("female")
  User Load (0.5ms)  SELECT "users".* FROM "users" WHERE "users"."sex" = 'female'
 => #<ActiveRecord::Relation []> 
```

RailsGuilde -> Active Record Query Interface -> [Scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes)

## Callback

ActionController の Callback と似たような形で validationの前後、create の前後、 update の前後、削除の前後などに特定の処理をさせることができます。

例）注文内容の変更に伴って、小計を修正する

order_item.rb

```ruby
class OrderItem < ActiveRecord::Base
  belongs_to :product
  belongs_to :order

  validates  :product_id, :quantity, :order_id, presence: true

  after_save :calculate_summary

  def calculate_summary
    order       = Order.find(order_id)
    order_items = OrderItem.where(order_id: order_id)
    summary     = order_items.map{|i| i.quantity * i.product.price}.inject(:+)
    order.update(summary: summary)
  end
end
```

コールバックの確認

Product のデータを作っておく

```sh
irb(main):003 > Product.create(name: "たこ焼き", price: 300)
   (0.1ms)  begin transaction
  SQL (4.3ms)  INSERT INTO "products" ("created_at", "name", "price", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Sun, 09 Feb 2014 03:22:24 UTC +00:00], ["name", "たこ焼き"], ["price", 300], ["updated_at", Sun, 09 Feb 2014 03:22:24 UTC +00:00]]
   (1.2ms)  commit transaction
 => #<Product id: 1, name: "たこ焼き", price: 300, created_at: "2014-02-09 03:22:24", updated_at: "2014-02-09 03:22:24"> 
```

OrderItem(注文内容)のデータを作る

```sh
irb(main):001 > OrderItem.create(product_id: 1, quantity: 2, order_id: 1)
   (0.1ms)  begin transaction
  SQL (4.8ms)  INSERT INTO "order_items" ("created_at", "order_id", "product_id", "quantity", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", Sun, 09 Feb 2014 03:30:32 UTC +00:00], ["order_id", 1], ["product_id", 1], ["quantity", 2], ["updated_at", Sun, 09 Feb 2014 03:30:32 UTC +00:00]]
  Order Load (0.2ms)  SELECT "orders".* FROM "orders" WHERE "orders"."id" = ? LIMIT 1  [["id", 1]]
  OrderItem Load (0.3ms)  SELECT "order_items".* FROM "order_items" WHERE "order_items"."order_id" = 1
  Product Load (0.2ms)  SELECT "products".* FROM "products" WHERE "products"."id" = ? ORDER BY "products"."id" ASC LIMIT 1  [["id", 1]]
  SQL (0.4ms)  UPDATE "orders" SET "summary" = ?, "updated_at" = ? WHERE "orders"."id" = 1  [["summary", 600], ["updated_at", Sun, 09 Feb 2014 03:30:32 UTC +00:00]]
   (0.9ms)  commit transaction
 => #<OrderItem id: 1, product_id: 1, quantity: 2, order_id: 1, created_at: "2014-02-09 03:30:32", updated_at: "2014-02-09 03:30:32"> 
```

該当の Order(小計) が更新されていることを確認する

```sh
irb(main):002 > Order.find(1)
  Order Load (0.2ms)  SELECT "orders".* FROM "orders" WHERE "orders"."id" = ? LIMIT 1  [["id", 1]]
 => #<Order id: 1, user_id: 1, summary: 600, created_at: "2014-02-09 02:05:11", updated_at: "2014-02-09 03:30:32"> 
```

OrderItem のデータを更新する

```sh
irb(main):002 > OrderItem.find(1).update(quantity: 4)
  OrderItem Load (0.3ms)  SELECT "order_items".* FROM "order_items" WHERE "order_items"."id" = ? LIMIT 1  [["id", 1]]
   (0.1ms)  begin transaction
  SQL (1.9ms)  UPDATE "order_items" SET "quantity" = ?, "updated_at" = ? WHERE "order_items"."id" = 1  [["quantity", 4], ["updated_at", Sun, 09 Feb 2014 03:35:45 UTC +00:00]]
  Order Load (0.1ms)  SELECT "orders".* FROM "orders" WHERE "orders"."id" = ? LIMIT 1  [["id", 1]]
  OrderItem Load (0.2ms)  SELECT "order_items".* FROM "order_items" WHERE "order_items"."order_id" = 1
  Product Load (0.1ms)  SELECT "products".* FROM "products" WHERE "products"."id" = ? ORDER BY "products"."id" ASC LIMIT 1  [["id", 1]]
  SQL (0.3ms)  UPDATE "orders" SET "summary" = ?, "updated_at" = ? WHERE "orders"."id" = 1  [["summary", 1200], ["updated_at", Sun, 09 Feb 2014 03:35:45 UTC +00:00]]
   (1.7ms)  commit transaction
 => true 
```

該当の Order が更新されていることを確認する

```sh
irb(main):003 > Order.find(1)
  Order Load (0.2ms)  SELECT "orders".* FROM "orders" WHERE "orders"."id" = ? LIMIT 1  [["id", 1]]
 => #<Order id: 1, user_id: 1, summary: 1200, created_at: "2014-02-09 02:05:11", updated_at: "2014-02-09 03:35:45"> 
```

RailsGuide -> [Active Record Callbacks](http://edgeguides.rubyonrails.org/active_record_callbacks.html)

<% if false %>
# ここまでのまとめ

- ActiveRecord はテーブル定義の作成、変更、 SQLの発行、バリデーション、コールバックなどの機能があります
<% end %>

